name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 5 1,15 * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Required for OIDC communication with Codecov
permissions:
  id-token: write
  contents: read

defaults:
  run:
    # fail on error (-e), on pipes (-o pipefail), and on unset variables (-u)
    shell: bash -euo pipefail {0}

jobs:
  # Get test environments from hatch (defined in pyproject.toml)
  get-environments:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.get-envs.outputs.envs }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Full fetch depth required for hatch-vcs versioning
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Get test environments
        id: get-envs
        run: |
          ENVS_JSON=$(uvx hatch env show --json | jq -c 'to_entries
            | map(
                select(.key | startswith("hatch-test"))
                | {
                    name: .key,
                    label: (if (.key | contains("pre")) then .key + " (PRE-RELEASE DEPENDENCIES)" else .key end),
                    python: .value.python
                  }
              )')
          echo "envs=${ENVS_JSON}" | tee $GITHUB_OUTPUT

  # Run tests through hatch across the defined matrix
  test:
    needs: get-environments
    # Potentially required for Codecov OIDC or env protection rules
    environment:
      name: codecov
    strategy:
      fail-fast: false
      matrix:
        # Run on ubuntu only for now
        os: [ubuntu-latest]
        env: ${{ fromJSON(needs.get-environments.outputs.envs) }}

    name: ${{ matrix.env.label }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          # Full fetch depth required for hatch-vcs versioning
          fetch-depth: 0
      - name: Install uv and setup Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.env.python }}
          cache-dependency-glob: pyproject.toml
      - name: Create hatch environment
        run: uvx hatch env create ${{ matrix.env.name }}
      - name: Run tests using hatch
        env:
          MPLBACKEND: agg
          DISPLAY: :42
          PLATFORM: ${{ matrix.os }}
        run: uvx hatch run ${{ matrix.env.name }}:run-cov
      - name: Generate coverage report
        run: uvx hatch run ${{ matrix.env.name }}:coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true

  # Check that all matrix jobs passed
  check:
    name: Tests pass in all hatch environments
    if: always()
    needs:
      - get-environments
      - test
    runs-on: ubuntu-latest
    steps:
        - name: Check if all jobs succeeded
          uses: re-actors/alls-green@release/v1
          with:
            jobs: ${{ toJSON(needs) }}
